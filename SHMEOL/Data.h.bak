#pragma once

#include "AXTDefine.h"
#include "Library/Inspection/Include/LibACMISCommon/ACMISCommon.h"
///////////////////////////////////////////////////////////////////////////////
//
//	SystemData Class
//
class CSystemData
{
public:
	CSystemData();
	~CSystemData();

public:
	void Load();
	void Save();
	void CopyBackup();

public:
	int m_nSysNo;
	int m_nUnitNo;

	TCHAR m_szMesIp[SIZE_OF_100BYTE];			// MES IP
	int m_nMesPort;								// MES 포트
	TCHAR m_szFactoryCd[SIZE_OF_100BYTE];		// 설비코드

	TCHAR m_szModelName[SIZE_OF_100BYTE];		// 모델 명
	TCHAR m_szPassword[SIZE_OF_100BYTE];		// 비밀번호
	TCHAR m_szAAIp[SIZE_OF_100BYTE];			// MAIN PC IP
	TCHAR m_szInspIp[SIZE_OF_100BYTE];			// 화상검사기 PC IP
	
	double	m_dMotorSpeed[MAX_UNIT_COUNT][MAX_MOTOR_COUNT];		//속도
	double	m_dMotorAccTime[MAX_UNIT_COUNT][MAX_MOTOR_COUNT];	//가속
	double  m_dMotorDecTime[MAX_UNIT_COUNT][MAX_MOTOR_COUNT];	//감속
	double	m_dMotorResol[MAX_UNIT_COUNT][MAX_MOTOR_COUNT];		//전자기어비
	double	m_dOrgDataset[MAX_UNIT_COUNT][MAX_MOTOR_COUNT];		//강제원점

	double	m_dLimitSFRBalance[MAX_UNIT_COUNT];

	CDPoint m_clOCSpec[MAX_UNIT_COUNT];
	double m_dOCSpecTh[MAX_UNIT_COUNT];

	int m_nAAPort;				// MAIN PC Port
	int m_nInspPort;			// 화상검사기 PC Port
	int m_nLightPort;			// 조명 컨트롤러 포트
	int m_nDomeLightPort[2];	// DOME 조명 컨틀롤러 포트
	int m_nTopLightPort[2];		// 변위센서 포트

	int m_nSFR_Type[MAX_LAST_INSP_COUNT];

	TCHAR m_szMesPath[SIZE_OF_1K];				// MES LOF DATA 저장 경로
};


typedef struct STRUC_TEACH_DATA
{
	double dPos[MAX_MOTOR_COUNT];
	double dOffset[MAX_MOTOR_COUNT];
} STRUC_TEACH_DATA;

typedef struct STRUC_AA_INFO
{
	double dMoveVel;			/* 이동 속도 */
	double dMoveAcc;			/* 가감속 */
	double dMoveDistance;		/* 이동거리 : mm */
	int	nDelayTime;				/* 단위 : msec */
	int	nMaxStepCount;			/* MAX STEP 수*/	
	float fLimitMTF;			/* Rough 이동 Limit MTF 값 */
	int nAvgSfrCount;			/* SFR 평균 카운트*/
}STRUC_AA_INFO;


class CSFRInfo
{
public:
	CSFRInfo()
	{
		int i;
		double dOffsetX, dOffsetY;

		m_nSizeX = 80;// 50;
		m_nSizeY = 80;// 70;


		for (i = 0; i < (MAX_LAST_INSP_COUNT); i++)
		{
			m_clPtOffset[i].x = m_clPtOffset[i].y = 0;

			switch (i)
			{
			case 0:		dOffsetX = 2.15;	dOffsetY = 2.31;	break;
			case 1:		dOffsetX = 4.25;	dOffsetY = 4.82;	break;
			case 2:		dOffsetX = 1.38;	dOffsetY = 4.82;	break;
			case 3:		dOffsetX = 1.38;	dOffsetY = 1.53;	break;
			case 4:		dOffsetX = 4.25;	dOffsetY = 1.53;	break;
			case 5:		dOffsetX = 1.51;	dOffsetY = 2.41;	break;
			case 6:		dOffsetX = 3.20;	dOffsetY = 2.41;	break;
			case 7:		dOffsetX = 19.2;	dOffsetY = 20.6;	break;
			case 8:		dOffsetX = 1.15;	dOffsetY = 19.0;	break;
			case 9:		dOffsetX = 1.15;	dOffsetY = 1.27;	break;
			case 10:	dOffsetX = 20.9;	dOffsetY = 1.28;	break;
			case 11:	dOffsetX = 2.19/*1.36*/;	dOffsetY = 20.6/*1.50*/;	break;
			case 12:	dOffsetX = 2.19;	dOffsetY = 1.23;	break;
			/*case 13:	dOffsetX = 5.61;	dOffsetY = 1.51;	break;
			case 14:	dOffsetX = 11.1;	dOffsetY = 2.41;	break;
			case 15:	dOffsetX = 19.2;	dOffsetY = 20.6;	break;
			case 16:	dOffsetX = 1.15;	dOffsetY = 19.0;	break;
			case 17:	dOffsetX = 1.15;	dOffsetY = 1.27;	break;
			case 18:	dOffsetX = 20.9;	dOffsetY = 1.28;	break;*/
			}
			
			m_clPtOffset[i].x = (LONG)((double)CCD2_CAM_SIZE_X / dOffsetX);
			m_clPtOffset[i].y = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) / dOffsetY);
		}

		m_clRectCircle[0].left = (LONG)((double)CCD2_CAM_SIZE_X * 0.25);
		m_clRectCircle[0].top = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.03);
		m_clRectCircle[0].right = (LONG)((double)CCD2_CAM_SIZE_X * 0.41);
		m_clRectCircle[0].bottom = (LONG)((double)(CCD2_CAM_SIZE_Y - 4) * 0.28);

		m_clRectCircle[1].left = (LONG)((double)CCD2_CAM_SIZE_X * 0.59);
		m_clRectCircle[1].top = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.03);
		m_clRectCircle[1].right = (LONG)((double)CCD2_CAM_SIZE_X * 0.73);
		m_clRectCircle[1].bottom = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.28);

		m_clRectCircle[2].left = (LONG)((double)CCD2_CAM_SIZE_X * 0.25);
		m_clRectCircle[2].top = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.72);
		m_clRectCircle[2].right = (LONG)((double)CCD2_CAM_SIZE_X * 0.41);
		m_clRectCircle[2].bottom = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.97);

		m_clRectCircle[3].left = (LONG)((double)CCD2_CAM_SIZE_X * 0.59);
		m_clRectCircle[3].top = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.72);
		m_clRectCircle[3].right = (LONG)((double)CCD2_CAM_SIZE_X * 0.73);
		m_clRectCircle[3].bottom = (LONG)((double)(CCD2_CAM_SIZE_Y/* - 4*/) * 0.97);
	}

public:
    CRect m_clRectCircle[4];
    CPoint m_clPtCircle[4];
    //
    CRect m_clRectFov[MAX_FOV_COUNT];
    CPoint m_clPtFov[MAX_FOV_COUNT];
    //
    CRect m_clRectSnr[MAX_SNR_COUNT];
	CRect m_clRectSnr2[MAX_SNR_COUNT];
    CPoint m_clPtSnr[MAX_SNR_COUNT];
	CPoint m_clPtSnr2[MAX_SNR_COUNT];

	CPoint m_clPtOffset[MAX_LAST_INSP_COUNT];
	int m_nSizeX;
	int m_nSizeY;

};
enum AA_SFR_SPEC {
    AA_CL_00F_V = 0, AA_CR_OOF_V, AA_CT_00F_H, AA_CB_00F_H, AA_LT_04F_V,
    AA_LT_04F_H, AA_RT_04F_V, AA_RT_04F_H, AA_RB_04F_V, AA_RB_04F_H,
    AA_LB_04F_V, AA_LB_04F_H, AA_L_04F_V, AA_L_04F_H, AA_R_04F_V,
    AA_R_04F_H, AA_LT_07F_V, AA_LT_07F_H, AA_RT_07F_V, AA_RT_07F_H,
    AA_RB_07F_V, AA_RB_07F_H, AA_LB_07F_V, AA_LB_07F_H, MAX_SFR_AA_INSP_CNT
};
#if  (____MODEL_NAME == TESLA_WIDE)
enum AA_INSP_SPEC {
    CT_00F_H = 0, CB_00F_H, CL_00F_V, CR_OOF_V,//CL_00F_V = 0, CR_OOF_V, CT_00F_H, CB_00F_H, 
    LT_04F_V, LT_04F_H,
    RT_04F_V, RT_04F_H,
    LB_04F_V, LB_04F_H,
    RB_04F_V, RB_04F_H,
    MAX_SFR_INSP_CNT
};
#elif  (____MODEL_NAME == TESLA_MAIN_NARROW)
enum AA_INSP_SPEC {
    CT_00F_H = 0, CB_00F_H, CL_00F_V, CR_OOF_V,//CL_00F_V = 0, CR_OOF_V, CT_00F_H, CB_00F_H, 
    LT_04F_V, LT_04F_H,
    RT_04F_V, RT_04F_H,
    LB_04F_V, LB_04F_H,
    RB_04F_V, RB_04F_H,
    LT_08F_V, LT_08F_H,
    RT_08F_V, RT_08F_H,
    LB_08F_V, LB_08F_H,
    RB_08F_V, RB_08F_H,
    MAX_SFR_INSP_CNT
};
enum AA_INSP_SUMAVE_SPEC {
	CENTER_0123, //CT_00F_H = 0, CB_00F_H, CL_00F_V, CR_OOF_V,//CENTER
	MID_0405,
	MID_0607,
	MID_0809,
	MID_1011,
	SIDE_1213,
	SIDE_1415,
	SIDE_1617,
	SIDE_1819,
	MAX_SFR_INSP_SUMAVE_CNT
};
#endif


///////////////////////////////////////////////////////////////////////////////
//
//	ModelData Class
//
class CModelData
{
public:
	CModelData();
	~CModelData();

public:
	void Load(TCHAR* szModelName);
	void Save(TCHAR* szModelName);
	void SaveTeachData(TCHAR* szModelName);
	void CopyBackup(TCHAR* szModelName);
    void PatternSave(TCHAR* szModelName);
    void PatternLoad(TCHAR* szModelName);


	void AcmisDataLoad(TCHAR* szModelName);
	void AcmisDataSave(TCHAR* szModelName);
	
	void SetUnit(int nUnit);

public:
	int m_nUnit;

	//
	//-------------------------------------------------------------------------
	//
	//★ACMIS 검사 Spec Data
	//-------------------------------------------------------------------------
//TAllDefectPixel_ONSEMI_RCCB m_DefectSpec;
	int n_DefectCountLimit;
	int n_ClusterCountLimit;
	//Stain

	//fov , distortion 
	double m_FovSpec[9];//

    //oc , rotate
    double m_OcSpec[2];//

    //Color Sensitivity
    double m_ColorSensitivitySpec[8];//

    //SNR
    double m_SnrSpec[2];//

	//Uniform 
	double m_UniformSpec[7];//

	//Relative Illumination  
	double m_RIlluminationSpec[5];//

	//Blemish Stain  
	double* m_BlemishSpec;
	double* m_LcbSpec;
	double* m_YmeanSpec;
	//Defect
	double* m_DefectSpec;
	double* m_ICSpec;
    //Chart  
    double m_ChartSpec[5];

    //RI  
    double* m_RISpec;//m_RISpec[6] = CornerVariationMin , m_RISpec[7] = CornerVariationMax
	
    double m_RirOI[100][10];
	//-------------------------------------------------------------------------
	//
	//-------------------------------------------------------------------------
	TCHAR m_szIniPath[SIZE_OF_1K];				// 센서구동 Ini파일 경로
	int m_nWidth;								// CCD SENSOR SIZE X
	int m_nHeight;								// CCD SENSOR SIZE Y

	CSFRInfo m_clSfrInfo;
	STRUC_TEACH_DATA m_stTeachData[MAX_POS_COUNT];

	int m_nRoiSizeX;
	int m_nRoiSizeY;
	double m_dCcdCellSize;

	int m_nMTF_FinalMode;			//MTF Final 측정시 Point 수(17P=0, 24P=1)
	int m_nCcdFlipUse;				//CCD 영상 반전 사용여부	
	int m_nOldChartMTF;				//구차트 MTF 검사 여부(0=미사용, 1=사용)

	double m_dMTFOffset;			//신규 차트 MTF OFFSET 가중치

	STRUC_AA_INFO m_stAFInfo[2];			/* AutoFocus Rough/Fine */
	double	m_dLimitSFRCent;
	double m_d2ndAAMoveDistance;				// 2차 AA 시작 지점 이동 거리
	double	m_dLimitSFRSide;

	int m_nCountOfCheckSFR;					// SFR 감소 판단 데이터 카운트
	double m_dSfrMoveDistance;				// SFR 감소시 이동 거리

	int m_nSfrMode;							// SFR 모드

	int m_nSFR_N_POS;

	double m_dLaserMoveX[2];		// 0 : 내측, 1 : 외측
	double m_dLaserMoveY[2];		// 0 : 내측, 1 : 외측
	
	int m_nStainCount[2];			//! Stain 불량 카운트 [0] 화이트  [1] 블랙	
	
	DWORD m_dwUvTime;
	
	double m_dEscapePosPcbZ;
	
	int m_nSensorAlignRetryCount;
	double m_dSensorAlignDelay;
	int m_nLaserRetryCount;			// Laser Retry Count
	double m_dLaserDelay;
	
	int m_nDryRunMode;					// 0 : NORMAL / 1 : 공운전 모드
	int m_nComplMode;				// 0 : NORMAL / 1 : 완제품 모드

	int m_nUvUse;					// UV 경화 사용여부

	int m_nLaserInUse;				// LASER 내부 사용여부
	int m_nLaserOutUse;				// LASER 외부 사용여부
	int m_nUnloadAfter1stAAUse;		// 1차 AA후 배출 사용여부
    //
	int m_nStainInspUse;			// STAIN 검사 사용여부
	int m_nDarkInspUse;				// DARK 검사 사용여부

    int m_nSnrInspUse;
    int m_nDefectInspUse;
    int m_nRIInspUse;
    int m_nColorUniformityInspUse;
    int m_m_nColorSensitivityInspUse;
    //
    //
	int m_nCcdDefectInfpUse;		// CCD 이물검사 사용여부
	int m_nFpsStopUse;				// FPS 일정 값 이하시 CCD STOP 사용여부
	float m_fFpsStopVal;			// FPS 설정 값
	int m_nLaserControlLock;		// Laser Control 사용여부
	int m_nMtfOverlayUse;
	int m_nDomeChartUse;
	int m_nUVLampAlarmUse;
	int m_nAAPass;
	int m_nInspectionPass;

	double m_dOffsetPrevUV_X;
	double m_dOffsetPrevUV_Y;
	double m_dOffsetPrevUV_Z;
	double m_dOffsetPrevUV_Tx;
	double m_dOffsetPrevUV_Ty;
	double m_dOffsetPrevUV_Th;
	
	double m_dPCBVacuumDelay;
	double m_dPCBGripDelay;
	double m_dPCBGripUpDelay;
	double m_dLaserTimeOut;
	double m_dFinalDelay;
	double m_dBondingDelay;
	
	int m_nPinStopUse;				// 포거핀 사용량 STOP 사용여부
	int m_nSensorCnt;				// 포거핀 사용량
	int m_nLight[MAX_LIGHT_COUNT];
	int m_nDomeLightVal[14];


	double m_dOcOffsetX;
	double m_dOcOffsetY;

	double m_dOkLimit[MAX_MOTOR_COUNT];
	double m_dErrLimit[MAX_MOTOR_COUNT];

	double m_dStainLsbCenter;
	double m_dStainLsbCorner;
	double m_dStainLsbEdge;

	double m_dStainYMeanCenter;
	double m_dStainYMeanCorner;
	double m_dStainYMeanEdge;

	int m_nMarkNo;
	int m_nMinMatching;

    int m_nDirection[MAX_SFR_INSP_CNT];
    
    double m_dLinePulse;

    CPoint m_nPatternPos[MAX_LAST_INSP_COUNT];
    CPoint m_nPatternSize[MAX_LAST_INSP_COUNT];
    CPoint m_MTF_ROI_Pos[MAX_SFR_INSP_CNT];

    double m_dChartHfovMin;
    double m_dChartHfovMax;

    double m_dChartVfovMin;
    double m_dChartVfovMax;

    double m_dChartDistortionMin;
    double m_dChartDistortionMax;

	int m_nModelType;
};


typedef struct STRUC_SFR_INSP
{
	int nDataCount[MAX_SFR_INSP_COUNT];

	float fMotorPos[MAX_CCD_STEP_COUNT][6];
	float fImageAlign[MAX_CCD_STEP_COUNT][4];

	CRect clRectROI[4];

	CRect	clRect[MAX_LAST_INSP_COUNT];			// 챠트에 보이는 19개 사각형 인식 좌표..
	CRect	_64_Sfr_Rect[MAX_SFR_INSP_COUNT];		// 챠트에 보이는 64개 SFR 검사 영역..
	CDPoint	Sfr_Pos[MAX_CCD_STEP_COUNT][5];			// AA Tile 계산 용 코너 부 마크 좌표

	float	fSfrN4[MAX_CCD_STEP_COUNT][5];
	float	fSfrN8[MAX_CCD_STEP_COUNT][5];

	float	_64_fSfrN4[MAX_SFR_INSP_COUNT];
	float	_64_fSfrN8[MAX_SFR_INSP_COUNT];

    float	_fAverSfr[MAX_SFR_INSP_COUNT];

	double dSfrDataX[MAX_SFR_INSP_COUNT][MAX_SFR_DATA_COUNT];
	double dSfrDataY[MAX_SFR_INSP_COUNT][MAX_SFR_DATA_COUNT];

	int nMaxIndex[5];
	double dMaxPos[5];

	double dTiltX;
	double dTiltY;
	double dLogTiltX[2];
	double dLogTiltY[2];
	double dLogMotorTX;
	double dLogMotorTY;
} STRUC_SFR_INSP;



///////////////////////////////////////////////////////////////////////////////
//
//	MarkData Class
//
class CMarkData
{
public:
	CMarkData();
	~CMarkData();

	void SetUnit(int nUnit) { m_nUnit = nUnit; }
	void LoadData(TCHAR* szModelName);
	void SaveData(TCHAR* szModelName);
	void CopyBackup(TCHAR* szModelName);

public:
	int m_nSmooth[MAX_MARK_COUNT];
	CRect m_clRectRoi[MAX_MARK_COUNT];
	int m_nUnit;
};


///////////////////////////////////////////////////////////////////////////////
//
//	TaskWork Calss
//
class CTaskWork
{
public:
	CTaskWork();
	~CTaskWork();

public:
	void LoadData();
	void SaveData();
    void InitLogSet();
	void InitSfrInsp();
    void InitSfrSpec();
	void SetUnit(int nUnit);

public:
	int m_nUnit;							// UNIT NO

	TCHAR m_szLotID[SIZE_OF_100BYTE];		// LOT ID
	TCHAR m_szChipID[SIZE_OF_100BYTE];		// CHIIP ID(BCR)
	TCHAR m_szImagePath[SIZE_OF_1K];		// ADD 
	int m_nAutoFlag;						// AUTO 
	int m_nStartStep;
	int m_nEndStep;
	int m_nStartLensStep;
	int m_nEndLensStep;

	int m_nCurrentStep;
	int m_nCurrentLensStep;

	DWORD m_dwTickCount;
	DWORD m_dwLensTickCount[2];
	DWORD m_dwPcbTickCount;

	int m_nDrawBarStep;
	int m_nCountOfTotalStepAA;
	int m_nCountOfStepAA;
	int m_nCountOfSecondStepAA;
	bool m_bFlagDecreaseSFR;
	bool m_bSecondAA;
	bool m_bFlagFineMove;
	bool m_bSfrResult;
	int m_nResultCode;

	CRect m_FindCircleRect[4];
	CRect m_FindFovRect[MAX_FOV_COUNT];
    CPoint m_clPtCircle[4];
    CPoint m_clPtFov[MAX_FOV_COUNT];
    CPoint m_clPtSnr[MAX_FOV_COUNT];
	CPoint m_clPtSnr2[MAX_FOV_COUNT];
	double m_dFOV[5];

	double m_dOpticalPosX;
	double m_dOpticalPosY;
	double m_dOpticalShiftX;
	double m_dOpticalShiftY;

	double m_dOutTx;
	double m_dOutTy;

	int m_nOpticalTh;
	CRect m_clOpticalRoi;

	int m_nTotalCount;
	int m_nTotalOkCount;
	int m_nTotalNgCount;
	int m_nUsePinCount;

	int m_nMTFNgCount;
	int m_nOCNgCount;
	int m_nDistortionNgCount;
	int m_nCurrentNgCount;
	int m_nTestPatternNgCount;
	int m_nDefectInspNgCount;
	int m_nStainInspNgCount;
	int m_nDarkInspNgCount;
	int m_nUniformityNgCount;

	double m_dTotalTactTime;
	DWORD m_dwTotalTactTime;
	double m_dAlignTackTime;
	DWORD m_dwAlignTackTime;
	double m_dBcrTackTime;
	DWORD m_dwBcrTackTime;
	double m_dLaserTactTime;
	DWORD m_dwLaserTactTime;
	double m_dAATactTime;
	DWORD m_dwAATactTime;
	double m_dInspTactTime;
	DWORD m_dwInspTactTime;	
		
	//STURC_OS_CHECK	m_stOsCheck;
	STRUC_SFR_INSP	m_stSfrInsp;
	//STRUC_DEFECT_INSP m_stDefectInsp;

	int m_nRecvAlignData;
	double m_dSensorAlign[3];		// X,Y,T
	double m_dAADataX;
	double m_dAADataY;
	double m_dAADataTh;

	double m_dDBDataX;
	double m_dDBDataY;
	double m_dDBDataTh;
	double m_dDBDataInTx;
	double m_dDBDataInTy;
	double m_dDBDataOutTx;
	double m_dDBDataOutTy;

	bool m_bRecvLaserTilt;
	int m_nLaserTiltIndex;
	double m_dLaserVal[4];
	CDPoint m_clDpLaserPos[4];
	double m_dLaserTiltX[2];
	double m_dLaserTiltY[2];
	
	double m_dDataOffsetX[2];
	double m_dDataOffsetY[2];
	double m_dDataOffsetTh[2];

	double m_dImgShiftX;
	double m_dImgShiftY;
	double m_dImgShiftTh;

	double m_dOcResultX;
	double m_dOcResultY;
    double m_dThResultY;
	int m_nRetryCount;
	float m_fFps;
	int m_nEmission;

	int grabFailCount;
	/*bool m_bFlagMoveLensBonding;
	bool m_bFlagMoveLensComplete;	
	bool m_bFlagMoveLensLoading;*/		// LENS PICKUP 이동 중..Z
	
	bool m_bWaitLensBonding;			// LENS BONDING 대기중...
	bool m_bMovingLens;					// LENS 이동중...
	bool m_bMoveLensLoading;			// LENS STAGE에 LOADING 중...
	
	bool m_bLensMovePickup;				// LENS STAGE에 PICKUP하러 이동중..
	bool m_bLensStageOn;				// LENS STAGE에 제품 여부 확인
	int  m_nComplType;					// 완제품 OK/이물NG/해상력NG

	bool m_bLensSocketIF[MAX_LENS_IF_COUNT];
	bool m_bPcbSocketIF[MAX_PCB_IF_COUNT];
	bool m_bUldSocketIF[MAX_ULD_IF_COUNT];
	
	bool m_bDoorInterlock;
	bool m_bLensInterLock;
	bool m_bPcbInterLock;

	bool m_bManualAAMove;
	bool m_bManualLaserPos;				// TRUE : 내부, FALSE : 외부

	bool m_bManualTest;
	bool m_bInputSignal;
	bool m_bOutputSignal;

	bool m_bPcbExist;
    std::vector<int> m_vDirection;
    std::vector<double> m_vFrquency;
    std::vector<double> m_vOffset;
    std::vector<double> m_vSFR;
    std::vector<double> m_vThreshold;
    std::vector<TROIPoint> m_vROI;
};




class CMandoInspLog
{
public:
	CMandoInspLog();
	~CMandoInspLog();

	void InitData();
	void SaveLogAfterAA(int nUnit);			//AA후(UV전) Log Data
	void SaveLogAfterUV(int nUnit);					//UV후 Log Data 저장	
	void SaveLogUVAfterMin(int nUnit);

	void DrawNGOverlay(int nCh);	//NG항목 Overlay Draw
	void NGCheck(CString strNg);
public:
	SYSTEMTIME	m_stInspTime;		//검사 시작 시간 저장

	CString		m_sBarcodeID;			//바코드명
	double		m_dTilteOffset[2];	//PCB<->Lens 변위 측정 편차[TX, TY]
	double		m_dPCBOffset[3];	//PCB<->Lens Offset 편차[X/Y/T]
	bool		m_bInspRes;			//결과
	CString		m_sNGList;

	
	CString		m_sI2C;				//TestPattern 검사 틀린 갯수
	//-------------------------------------------------------------------------------------
	//검사 결과
	//-------------------------------------------------------------------------------------
	
    double      m_dOCResult[2];
	double		m_dFov;
	double		m_dDistortion;
	double		m_dSnr;
	double		m_dRotate;
	double		m_dCurrent;			//전류 측정값
	double		m_dDefect[2];		//Defect검사[White/Black]
	double		m_dStain[2];
	double		m_Dark;
	double		m_RI;
	double		m_ColorUniformity;		//이미지 두장 필요
	double      m_ColorSensitivity;
    //-------------------------------------------------------------------------------------
    // TESLA 화상 검사 로그 data
    double  m_LogDefectBright;
    double  m_LogDefectDark;
    double  m_LogDefectHot;

    double  m_LogDefectBrightCluster;
    double  m_LogDefectDarkCluster;
    double  m_LogDefectHotCluster;

    double  m_LogDefectDarkHorLine;
    double  m_LogDefectDarkVerLine;
    double  m_LogDefectBrightHorLine;
    double  m_LogDefectBrightVerLine;
    double  m_LogDefectColumnFPN[4];//Red Cr Cb Blue 1 0 3 2
    //
    double		m_dMTF[24];		//MTF 검사 항목
    //
    double		m_LogOC_X;          //890
    double		m_LogOC_Y;          //930
    double		m_LogOC_DelatX;     //-20
    double		m_LogOC_DelatY;     //20
    //
    double      m_LogDistortion;
    //
    double   m_LogSfr[MAX_SFR_INSP_COUNT];
    //
    double  m_LogBlemishBlackSpot;
    double  m_LogBlemishLcb;
    double  m_LogBlemishRU_Ymean;
    //
    double m_Log_CS_RG_6500K;
    double m_Log_CS_BG_6500K;
    double m_Log_CS_GrGb_6500K;
    double m_Log_CS_RC_5000k;
    double m_Log_CS_BC_5000k;
    double m_Log_CS_CrCb_5000k;
    
    //
    //
    double m_Log_RI_RED[100];
    double m_Log_RI_CLEARR[100];
    double m_Log_RI_CLEARB[100];
    double m_Log_RI_BLUE[100];
	//
	double m_Log_RI_CornerVar_R;
	double m_Log_RI_CornerVar_Cr;
	double m_Log_RI_CornerVar_Cb;
	double m_Log_RI_CornerVar_B;
    //
    double m_Log_RI_Center_R;
    double m_Log_RI_Center_Cr;
    double m_Log_RI_Center_Cb;
    double m_Log_RI_Center_B;
    //
    double m_Log_RI_LT_Ratio_R;
    double m_Log_RI_LT_Ratio_Cr;
    double m_Log_RI_LT_Ratio_Cb;
    double m_Log_RI_LT_Ratio_B;
    //
    double m_Log_RI_RT_Ratio_R;
    double m_Log_RI_RT_Ratio_Cr;
    double m_Log_RI_RT_Ratio_Cb;
    double m_Log_RI_RT_Ratio_B;
    //
    double m_Log_RI_LB_Ratio_R;
    double m_Log_RI_LB_Ratio_Cr;
    double m_Log_RI_LB_Ratio_Cb;
    double m_Log_RI_LB_Ratio_B;
    //
    double m_Log_RI_RB_Ratio_R;
    double m_Log_RI_RB_Ratio_Cr;
    double m_Log_RI_RB_Ratio_Cb;
    double m_Log_RI_RB_Ratio_B;

    //
    double m_Log_SNR_SNR;
    double m_Log_SNR_DR;
    //
    double  m_Log_CU_LT_Delta_RG;
    double  m_Log_CU_LT_Delta_RB;
    double  m_Log_CU_LT_Delta_BG;

    double  m_Log_CU_RT_Delta_RG;
    double  m_Log_CU_RT_Delta_RB;
    double  m_Log_CU_RT_Delta_BG;

    double  m_Log_CU_LB_Delta_RG;
    double  m_Log_CU_LB_Delta_RB;
    double  m_Log_CU_LB_Delta_BG;

    double  m_Log_CU_RB_Delta_RG;
    double  m_Log_CU_RB_Delta_RB;
    double  m_Log_CU_RB_Delta_BG;
    //
    double  m_Log_FOV_H_FOV;
    double  m_Log_FOV_V_FOV;
    double  m_Log_FOV_D_FOV;
    double  m_Log_Rotate;

    //
    //-------------------------------------------------------------------------------------




    //-------------------------------------------------------------------------------------




	double		m_dShading65FC[2];
	double		m_dShading85FC[2];





	double		m_d60lpmm[24];		//60lp/mm (17Point)
	double		m_d67lpmm[24];     //67lp/mm (17Point)

	double		m_dMinData[3];    //20150601

								  //! Main화면 NG List Overlay 관련 변수
	int			m_nNGCnt;
	CString		m_sDispNG[30];
	CString		m_sSendNGName;
};


class CMandoSfrSpec
{
public:
	CMandoSfrSpec();
	~CMandoSfrSpec();

	void SetUnit(int nUnit){ m_nUnit = nUnit; }

	void Load();
	void Save();
public:
	//신규 개조 -> 60LP, C/P은 제거, Only 67LP만.
	//기존 60LP, C/P 추가한 부분이 많고, C/P은 재사용할수 도 있으니
	//배열 3개는 그래도 가고, [0]배열, [2]배열은 사용 하지 않는다.
	// AA장비 변수
	double	m_dAASFR_Spec[MAX_SFR_INSP_COUNT][2][3];		// [0][0] : UV전 60lp, [0][1] : UV전 67lp, [0][2] : UV전 C/P, 
											//[1][0] : UV후 60, [1][1] : UV후 67lp, [1][2] : UV후 C/P
											// 화상검사기 변수

	double	m_dAASFR_SumAveSpec[MAX_LAST_INSP_COUNT];	//[0] : Center, [1] : 4,5, [2] : 5,6
	double m_dINSPSFR_Spec[MAX_SFR_INSP_COUNT][2];

	bool m_bInsp60Lp;
	bool m_bInsp67Lp;
	bool m_bInspCp;

private:
	int m_nUnit;
};


class CMesCommunication
{
public:
	CMesCommunication();
	~CMesCommunication();

	void Insp();
	void Save(int index);
	bool newSave(int index);
public:
	CString m_sMesLotID;				// 바코드명
	int		m_nMesCnt;					// 차수
	int		m_nMesFinalResult;			// 합부

	double	m_dMesCurrent;				// 전류측정
	CString m_sMesI2C;					// I2C
	

	double	m_dMesUVBeforeOC[2];		//OC 결과.[X/Y]  UV 전
	double	m_dMesUVAfterOC[2];			//OC 결과.[X/Y]  UV 후
	
	
	int		m_nMesStain;

	
	int		m_nMesDark;
	

	double	m_dMesShading65FC[2];
	double	m_dMesShading85FC[2];

	int		m_nMesCurrentResult;
	int		m_nMesI2CResult;

	

	

	int		m_nMesUVBeforeOCResult;
	int		m_nMesUVAfterOCResult[2];
	int		m_nMesDistortionResult;
	int		m_nMesStainResult;
    int		m_nMesDarkResult;

	int		m_nMesShading65FCResult[2];
	int		m_nMesShading85FCResult[2];


	double	m_dMesMTF67lp[MAX_SFR_INSP_COUNT];			//MTF 검사 항목
	double  m_dMesMTF67lpUVAfter[MAX_SFR_INSP_COUNT];
	int		m_nMesMTF67lpResult[MAX_SFR_INSP_COUNT];
	int		m_nMesMTF67lpResultUVAfter[MAX_SFR_INSP_COUNT];

	//----------------------------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------------
	//new Mes 190921
	double	m_dMesMTF[MAX_LAST_INSP_COUNT];				//MTF 검사 항목
	double  m_dMesMTFUVAfter[MAX_SFR_INSP_COUNT];
	
	int		m_nMesMTFResult[MAX_LAST_INSP_COUNT];
	int		m_nMesMTFResultUVAfter[MAX_SFR_INSP_COUNT];
	
	int		m_nMesDefect[14];//[11];
	
	double  m_dMesOC[2];
	double  m_dMesDeltaOC[2];
	
	double	m_nMesBlemish[3];			//0 = BlackSpot , 1 = LCB , 2 = RU_Ymean
	double  m_nMesColorSensitivity[6];
	double	m_nMesRI[20];
	double  m_nMesRICorner[4];
	double	m_nMesColorUniformity[12];
	double	m_dMesDistortion;
	double	m_dMesSnr;
	double	m_dMesDr;
	double	m_dMesFov[3];	//0 = HFov , 1 = VFov , 2 = DFov
	double	m_dMesRotate;

	//---------------------------------------------------------------
	//---------------------------------------------------------------
	//result
	int		m_nMesDefectResult[14];//[11];
	int		m_dMesOCResult[2];
	int		m_dMesDeltaOCResult[2];
	int		m_nMesColorSensitivityResult[6];
	int		m_nMesRIResult[20];
	int		m_nMesRIRICornerResult[4];
	int		m_nMesColorUniformityResult[12];
	int		m_nMesBlemishResult[3];
	int		m_dMesDistortionResult;
	int		m_dMesSnrResult;
	int		m_dMesDrResult;
	int		m_dMesFovResult[3];
	int		m_dMesRotateResult;

	CString m_sendData;
	CString m_getData;

	
};